package org.sv.flexobject.sql.connection;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.sql.*;

public abstract class ConnectionWrapper implements AutoCloseable {

    Logger logger = LogManager.getLogger(ConnectionWrapper.class);

    protected Connection connection = null;
    protected PreparedStatementHook preparedStatementHook = null;

    abstract public Connection setupConnection() throws SQLException;

    protected void ensureConnectionIsValid() throws SQLException {
        if (connection != null && connection.isClosed()) {
            logger.info("Connection " + connection + " is closed - reconnecting");
            connection = null;
        }

        if (connection == null) {
            connection = setupConnection();
            if (connection == null){
                logger.error("setupConnection() returned null");
                throw new SQLException("Failed to establish connection");
            }
            logger.info("Established " + toString());
        }
    }

    @Override
    public String toString() {
        try {
            ensureConnectionIsValid();
            DatabaseMetaData metaData = connection.getMetaData();
            StringBuilder sb = new StringBuilder("Connection ").append(connection);

            if (metaData != null) {
                sb.append(" to ").append(metaData.getDatabaseProductName())
                        .append(" using url:").append(metaData.getURL())
                        .append(" for user:").append(metaData.getUserName())
                        .append(" using driver:").append(metaData.getDriverName())
                        .append(" version:").append(metaData.getDriverVersion());
            }
            sb.append(" autoCommit is:").append(connection.getAutoCommit());
            return sb.toString();
        }catch (SQLException e){
            return "Invalid connection";
        }
    }

    public Connection getConnection() throws SQLException{
        ensureConnectionIsValid();
        return connection;
    }

    public void closeConnection() throws SQLException{
        if (connection != null && !connection.isClosed()) {
            logger.info("Closing connection " + connection);
            connection.close();
        }

        connection = null;
    }

    public void invalidateConnection(){
        try {
            closeConnection();
        } catch (SQLException e) {
            connection = null;
        }
    }

    @Override
    public void close() throws Exception {
        closeConnection();
    }

    public void setPreparedStatementHook(PreparedStatementHook preparedStatementHook) {
        this.preparedStatementHook = preparedStatementHook;
    }

    public void clearPreparedStatementHook() {
        this.preparedStatementHook = null;
    }

    public PreparedStatement prepareStatement(String sql) throws SQLException {
        ensureConnectionIsValid();
        if (preparedStatementHook != null) {
            preparedStatementHook.onPrepare(connection, sql);
        }
        PreparedStatement ps = connection.prepareStatement(sql);
        return preparedStatementHook != null ? preparedStatementHook.onStatementPrepared(connection, sql, ps) : ps;
    }

    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        ensureConnectionIsValid();
        if (preparedStatementHook != null)
            preparedStatementHook.onPrepare(connection, sql);
        PreparedStatement ps = connection.prepareStatement(sql, autoGeneratedKeys);
        return preparedStatementHook != null ? preparedStatementHook.onStatementPrepared(connection, sql, ps) : ps;
    }

    public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
        ensureConnectionIsValid();
        if (preparedStatementHook != null)
            preparedStatementHook.onPrepare(connection, sql);
        PreparedStatement ps = connection.prepareStatement(sql, columnNames);
        return preparedStatementHook != null ? preparedStatementHook.onStatementPrepared(connection, sql, ps) : ps;
    }

    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
        ensureConnectionIsValid();
        if (preparedStatementHook != null)
            preparedStatementHook.onPrepare(connection, sql);
        PreparedStatement ps = connection.prepareStatement(sql, columnIndexes);
        return preparedStatementHook != null ? preparedStatementHook.onStatementPrepared(connection, sql, ps) : ps;
    }

    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        ensureConnectionIsValid();
        if (preparedStatementHook != null)
            preparedStatementHook.onPrepare(connection, sql);
        PreparedStatement ps = connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
        return preparedStatementHook != null ? preparedStatementHook.onStatementPrepared(connection, sql, ps) : ps;
    }

    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        ensureConnectionIsValid();
        if (preparedStatementHook != null)
            preparedStatementHook.onPrepare(connection, sql);
        PreparedStatement ps = connection.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
        return preparedStatementHook != null ? preparedStatementHook.onStatementPrepared(connection, sql, ps) : ps;
    }


    public ResultSet executeQuery(PreparedStatement preparedStatement) throws SQLException {
        if (preparedStatementHook != null)
            preparedStatementHook.onExecute(connection, preparedStatement);
        ResultSet result = preparedStatement.executeQuery();

        if (preparedStatementHook != null)
            preparedStatementHook.onResult(connection, preparedStatement, result);

        return result;
    }

    public boolean execute(PreparedStatement preparedStatement) throws SQLException {
        if (preparedStatementHook != null)
            preparedStatementHook.onExecute(connection, preparedStatement);

        boolean result = preparedStatement.execute();

        if (preparedStatementHook != null)
            preparedStatementHook.onResult(connection, preparedStatement, result);

        return result;
    }

    public int executeUpdate(PreparedStatement preparedStatement) throws SQLException {
        if (preparedStatementHook != null)
            preparedStatementHook.onExecute(connection, preparedStatement);

        int result = preparedStatement.executeUpdate();

        if (preparedStatementHook != null)
            preparedStatementHook.onResult(connection, preparedStatement, result);

        return result;
    }
}
